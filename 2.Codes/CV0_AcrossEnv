################################################################################
#########                 Model for CA 
#########                  Using the models from 2.5.3 in the paper
#########                         
################################################################################

## ----------------------------------------------------------------
## ---------- 1.Packages and env
## ----------------------------------------------------------------
rm(list=ls())

require(BGLR)
require(tidyverse)
require(MTM)
require(BMTME)

setwd("") #*** change it here

## ----------------------------------------------------------------
## ---------- 2. Organizing the phenotypes
## ----------------------------------------------------------------
##>>----- Reading the BLUP information
# Data with Hybrid information (first column) environment information (Second 
# column), and three traits: EL, EW, and TPF.

raw_dat0 = read.table("../dataset.txt", h=TRUE) # can be built based on the BLUEs generated

##>>----- Preparing the dataset
raw_dat1 = raw_dat0[which(raw_dat0$Env != "FL21"),]
raw_dat2 = raw_dat1[which(raw_dat1$Env != "WI21"),]
raw_dat3 = raw_dat2[which(raw_dat2$Env != "CA21"),]

##>>----- For California (You can do the same for the other localities
CA21 = raw_dat0[which(raw_dat0$Env == "CA21"),]

dat1 = raw_dat3 

##>>----- Combining
dat0 = rbind(dat1,CA21)
dim(dat1)

## ----------------------------------------------------------------
################################################## ---------- GBLUP
## ----------------------------------------------------------------

## ----------------------------------------------------------------
## ---------- 3. Building and loading the Kernels
## ----------------------------------------------------------------

##>>---------------------------- Creating A+D matrices ---------------------
# Loading SNP matrix
Markers = load("Markers_SweetHybrid") # load the SNP matrix

# Generate relationship matrix using AGHMatrix package
# Additive
G_mat <- Gmatrix(Markers,
                 missingValue = "NA",
                 integer = FALSE,
                 thresh.missing = .3,
                 maf = 0.01)

# Dominance
D_mat <- Gmatrix(Markers,
                 missingValue = "NA",
                 integer = FALSE,
                 thresh.missing = .3,
                 maf = 0.01,
                 method="Vitezica")

# Parents 
ID_dat = as.matrix(dat0[,1])

# Unique
ID = unique(ID_dat)

#Cutting the matrix for account only genotypes with
#Additive kernel
K_GB = G_mat[rownames(G_mat)%in%ID,
             colnames(G_mat)%in%ID]

#Dominance kernel
K_GBD =  D_mat[rownames(D_mat)%in%ID,
               colnames(D_mat)%in%ID]

dim(K_GB)
## ----------------------------------------------------------------
## ---------- 4. Bayesian parameters
## ----------------------------------------------------------------

nIter = 30000
burnIn = 3000
thin = 10

#NA for 2021 
p <-list()
p = c(901:939)

## ----------------------------------------------------------------
## ---------- 5. Creating the incidence matrix and ETA - additive
## ----------------------------------------------------------------
##>>>---- Creating design matrix for lines
#matrix
Z_L=model.matrix(~0+IDGen,data=dat0)

#Expanding G for hybrids additive
K_G=Z_L%*%K_GB%*%t(Z_L)

#Expanding G for hybrids dominance
K_GD=Z_L%*%K_GBD%*%t(Z_L)

###>>>---- Design matrix of environments
Z_E=model.matrix(~0+Env,data=dat0)

###>>>---- Interaction term (Additive)
K.E=Z_E%*%t(Z_E)

K_GE=K_G*K.E

###>>>---- Interaction term (Dominance)
K.E=Z_E%*%t(Z_E)

K_GDE=K_GD*K.E

###>>>---------------- The ETA
A.GB=list(list(model='BRR',X=Z_E),
          list(K=K_G,model='RKHS'),
          list(K=K_GE,model='RKHS'))

###>>>---------------- The ETA
AD.GB=list(list(model='BRR',X=Z_E),
           list(K=K_G,model='RKHS'),
           list(K=K_GD,model='RKHS'),
           list(K=K_GE,model='RKHS'),
           list(K=K_GDE,model='RKHS'))
          

## ----------------------------------------------------------------
## ---------- 6. Single trait model with A + GE
## ----------------------------------------------------------------
###>>>---- Model

#accuracy storage
S_GB = data.frame()

#Traits
traits = c("EL","EW","TPF")

set.seed(0928761)
###>>>----- Loop through the traits
for (i in 1:length(traits)){
  
  #Each trait at once
  Y1=as.matrix(dat0[,(1+i)])
  
  
  #Data from 2021 to NA 
  Y_NA = Y1
  Pos_NA = p
  Y_NA[Pos_NA] = NA
  
  
  
 #model
mod1 = BGLR(y = Y_NA, 
         ETA= A.GB,
         nIter = nIter, 
         burnIn = burnIn,
         thin = thin)

PC = cor(Y1[Pos_NA],mod1$yHat[Pos_NA])
S_GB = rbind(S_GB,data.frame(Acc=PC,Trait=colnames(dat0[i+1])))

}

## ----------------------------------------------------------------
## ---------- 8. The multitrait model (GBLUP) with A
## ----------------------------------------------------------------
###>>>---- Model

#accuracy storage
M_GB = data.frame()

#Each trait at once
Y1=as.matrix(dat0[,c(2:4)])

#Data from 2021 to NA 
  Y_NA = Y1
  Pos_NA = p
  Y_NA[Pos_NA,] = NA
  


  set.seed(0928761)  
#model
mod2 = Multitrait(y = Y_NA,
            ETA=A.GB,
            resCov = list(type="DIAG"),
            nIter = nIter,
            burnIn = burnIn,
            thin = thin,
            saveAt = 'MGB_')


PC = diag(cor(Y1[Pos_NA,],mod2$ETAHat[Pos_NA,]))
M_GB = rbind(M_GB,data.frame(Acc=PC))

  

## ----------------------------------------------------------------
## ---------- 9. GBLUP single trait model (A + D)
## ----------------------------------------------------------------

###>>>---- Model

#accuracy storage
S_GBD = data.frame()

#Traits
traits = c("EL","EW","TPF")

set.seed(0928761)
###>>>----- Loop through the traits
for (i in 1:length(traits)){
  
  #Each trait at once
  Y1=as.matrix(dat0[,(1+i)])
  
  
  #Data from 2021 to NA 
  Y_NA = Y1
  Pos_NA = p
  Y_NA[Pos_NA] = NA
  
  
  
  #model
  mod3 = BGLR(y = Y_NA, 
            ETA=AD.GB,
            nIter = nIter, 
            burnIn = burnIn,
            thin = thin)
  
  PC = cor(Y1[Pos_NA],mod3$yHat[Pos_NA])
  S_GBD = rbind(S_GBD,data.frame(Acc=PC,Trait=colnames(dat0[i+1])))
  
}

## ----------------------------------------------------------------
## ---------- 10. The multitrait model (GBLUP) with A + D
## ----------------------------------------------------------------

###>>>---- Model

#accuracy storage
M_GBD = data.frame()

#Each trait at once
Y1=as.matrix(dat0[,c(2:4)])


#Data from 2021 to NA 
Y_NA = Y1
Pos_NA = p
Y_NA[Pos_NA,] = NA


set.seed(0928761)
#model
mod4 = Multitrait(y = Y_NA,
                  ETA=AD.GB,
                  resCov = list(type="DIAG"),
                  nIter = nIter,
                  burnIn = burnIn,
                  thin = thin)

PC = diag(cor(Y1[Pos_NA,],mod4$ETAHat[Pos_NA,]))
M_GBD = rbind(M_GBD,data.frame(Acc=PC))

########## SAVING

save(S_GB,S_GBD,M_GB,M_GBD, file = "Accuracy_GBLUP2.Rdata")


## ----------------------------------------------------------------
################################################## ---------- RKHS
## ----------------------------------------------------------------

## ----------------------------------------------------------------
## ---------- 3. Building and loading the Kernels
## ----------------------------------------------------------------
# Loading SNP matrix
load("Markers_SweetHybrid.Rdata")

# Hybrid ID 
ID_dat = as.matrix(dat0[,1])

# Unique
ID = unique(ID_dat)

# For additive and dominance kernels
KGK = getKernel(Markers = Markers_SweetHybrid, 
                 method = "euclidean",
                 GenoID = as.matrix(ID)
                 MM_threshold = 0.3, 
                 maf_thresh = 0.01)

## ----------------------------------------------------------------
## ---------- 5. Creating the incidence matrix and ETA - additive
## ----------------------------------------------------------------
K_GK = KGK[[1]]
K_GKD = KGK[[2]]

##>>>---- Creating design matrix for lines
#matrix
Z_L = model.matrix(~0+IDGen,data=dat0)

#Expanding G for lines additive
K_G=Z_L%*%K_GK%*%t(Z_L)

#Expanding G for lines
K_GD=Z_L%*%K_GKD%*%t(Z_L)

###>>>---- Design matrix of environments
Z_E=model.matrix(~0+Env,data=dat0)

###>>>---- Interaction term (Additive)
K.E=Z_E%*%t(Z_E)
K_GE=K_G*K.E #Hadamard

###>>>---- Interaction term (Dominance)
K.E=Z_E%*%t(Z_E)
K_GDE=K_GD*K.E #Hadamard

###>>>---------------- The ETA

A.GK=list(list(model='BRR',X=Z_E),
          list(K1 = exp(-h[1]*K_G), model='RKHS'),
          list(K2 = exp(-h[2]*K_G), model='RKHS'),
          list(K3 = exp(-h[3]*K_G), model='RKHS'),
          list(K4 = exp(-hD[1]*K_GE), model='RKHS'),
          list(K5 = exp(-hD[2]*K_GE), model='RKHS'),
          list(K6 = exp(-hD[3]*K_GE), model='RKHS'))

###>>>---- The ETA
AD.GK=list(list(model='BRR',X=Z_E),
           list(K1 = exp(-h[1]*K_G), model='RKHS'),
           list(K2 = exp(-h[2]*K_G), model='RKHS'),
           list(K3 = exp(-h[3]*K_G), model='RKHS'),
           list(K4 = exp(-hD[1]*K_GD), model='RKHS'),
           list(K5 = exp(-hD[2]*K_GD), model='RKHS'),
           list(K6 = exp(-hD[3]*K_GD), model='RKHS'),
           list(K7 = exp(-h[1]*K_GE), model='RKHS'),
           list(K8 = exp(-h[2]*K_GE), model='RKHS'),
           list(K9 = exp(-h[3]*K_GE), model='RKHS'),
           list(K10 = exp(-hD[1]*K_GDE), model='RKHS'),
           list(K11 = exp(-hD[2]*K_GDE), model='RKHS'),
           list(K12 = exp(-hD[3]*K_GDE), model='RKHS'))


## ----------------------------------------------------------------
## ---------- 6. Single trait model with A + GE
## ----------------------------------------------------------------
###>>>---- Model
#accuracy storage
S_GK = data.frame()

#Traits
traits = c("EL","EW","TPF")


###>>>----- Loop through the traits
set.seed(0928761)

for (i in 1:length(traits)){
  
  #Each trait at once
  Y1=as.matrix(dat0[,(1+i)])
  
  
  #Data from 2021 to NA 
  Y_NA = Y1
  Pos_NA = p
  Y_NA[Pos_NA] = NA
  
  #model
  mod1 = BGLR(y = Y_NA, 
              ETA=A.GK,
              nIter = nIter, 
              burnIn = burnIn,
              thin = thin)
  
  PC = cor(Y1[Pos_NA],mod1$yHat[Pos_NA])
  S_GK = rbind(S_GK,data.frame(Acc=PC,Trait=colnames(dat0[i+1])))
  
}

## ----------------------------------------------------------------
## ---------- 8. The multitrait model (GBLUP) with A
## ----------------------------------------------------------------
###>>>---- Model

#accuracy storage
M_GK = data.frame()
set.seed(0928761)

#Each trait at once
Y1=as.matrix(dat0[,2:4])

#Data from 2021 to NA 
Y_NA = Y1
Pos_NA = p
Y_NA[Pos_NA,] = NA

#model
mod2 = Multitrait(y = Y_NA,
                  ETA=A.GK,
                  resCov = list(type="DIAG"),
                  nIter = nIter,
                  burnIn = burnIn,
                  thin = thin,
                  saveAt = 'MGB_')

PC = diag(cor(Y1[Pos_NA,],mod2$ETAHat[Pos_NA,]))
M_GK = rbind(M_GK,data.frame(Acc=PC))

## ----------------------------------------------------------------
## ---------- 9. GBLUP single trait model (A + D)
## ----------------------------------------------------------------

###>>>---- Model
#Accuracy storage
S_GKD = data.frame()

#Traits
traits = c("EL","EW","TPF")

###>>>----- Loop through the traits
set.seed(0928761)

for (i in 1:length(traits)){
  
  #Each trait at once
  Y1=as.matrix(dat0[,(1+i)])
  
  #Data from 2021 to NA 
  Y_NA = Y1
  Pos_NA = p
  Y_NA[Pos_NA] = NA
  
  #model
  mod3 = BGLR(y = Y_NA, 
              ETA=AD.GK,
              nIter = nIter, 
              burnIn = burnIn,
              thin = thin)
  
  PC = cor(Y1[Pos_NA],mod3$yHat[Pos_NA])
  S_GKD = rbind(S_GKD,data.frame(Acc=PC,Trait=colnames(dat0[i+1])))
  
}

## ----------------------------------------------------------------
## ---------- 10. The multitrait model (GBLUP) with A + D
## ----------------------------------------------------------------
###>>>---- Model

#accuracy storage
M_GKD = data.frame()
set.seed(0928761)

#Each trait at once
Y1=as.matrix(dat0[,2:4])

#Data from 2021 to NA 
Y_NA = Y1
Pos_NA = p
Y_NA[Pos_NA,] = NA

#model
mod4 = Multitrait(y = Y_NA,
                  ETA=AD.GK,
                  resCov = list(type="DIAG"),
                  nIter = nIter,
                  burnIn = burnIn,
                  thin = thin)

PC = diag(cor(Y1[Pos_NA,],mod4$ETAHat[Pos_NA,]))
M_GKD = rbind(M_GKD,data.frame(Acc=PC))



#-----------Saving the accuracy
save(S_GK,S_GKD,M_GK,M_GKD, file = "Accuracy_GK2.Rdata")

#################################### The end #########################################


